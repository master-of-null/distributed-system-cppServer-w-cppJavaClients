package sample.waypoint.client;

import java.io.*;
import java.util.*;
import java.net.URL;

import org.json.*;

import javax.swing.*;
import java.io.*;
import javax.swing.event.*;
import javax.swing.text.html.*;
import java.awt.event.*;
import java.awt.*;
import java.util.*;
/**
 * Copyright (c) 2016 Tim Lindquist,
 * Software Engineering,
 * Arizona State University at the Polytechnic campus
 * <p/>
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation version 2
 * of the License.
 * <p/>
 * This program is distributed in the hope that it will be useful,
 * but without any warranty or fitness for a particular purpose.
 * <p/>
 * Please review the GNU General Public License at:
 * http://www.gnu.org/licenses/gpl-2.0.html
 * see also: https://www.gnu.org/licenses/gpl-faq.html
 * so you are aware of the terms and your rights with regard to this software.
 * Or, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,USA
 * <p/>
 * Purpose:
 * A Java class and main method demonstrating an approach to calling
 * JsonRpc methods where argument and return types are user-defined classes.
 *
 * @author Tim Lindquist (tim.lindquist@asu.edu), ASU Software Engineering
 * @version May 2016
 * @license See above
 */
public class WaypointCollectionClient extends WaypointGUI implements
                      ActionListener, ItemListener {

  private static final boolean debugOn = true;
  private JSONObject hashi;
  protected WaypointCollectionHttpProxy wc;
  

  public WaypointCollectionClient(String base, String url) {
   super(base);
   removeWPButt.addActionListener(this);
   addWPButt.addActionListener(this);
   modWPButt.addActionListener(this);
   importButt.addActionListener(this);
   exportButt.addActionListener(this);
   distBearButt.addActionListener(this);
   frWps.addItemListener(this);
   toWps.addItemListener(this);
   try {
    wc = new WaypointCollectionHttpProxy(new URL(url));

   }catch (Exception e) {
    e.printStackTrace();
    System.out.println("Oops, you didn't enter the right stuff");
   }
   hashi = importFile("waypoints.json");
   this.addWindowListener(new WindowAdapter() {
    @Override
    public void windowClosing(WindowEvent e) {
      debug("you clicked X");
      System.exit(0);
    }
   });

   setVisible(true);
  }

  public void itemStateChanged(ItemEvent event){
   if(event.getStateChange() == ItemEvent.SELECTED){
    Object comp = event.getSource();
    debug("Selection event generated by "+
             ((comp==frWps)?"from ":"to ")+"combobox. "+
             "Selected waypoint is: "+(String)event.getItem());
    String city = (String) event.getItem();
    JSONObject cityInfo = hashi.getJSONObject(city);

    latIn.setText(String.valueOf(cityInfo.get("lat")));
    lonIn.setText(String.valueOf(cityInfo.get("lon")));
    eleIn.setText(String.valueOf(cityInfo.get("ele")));
    nameIn.setText((String)cityInfo.get("name"));
    addrIn.setText((String)cityInfo.get("address"));
   }
  }

  public void actionPerformed(ActionEvent e) {
   if(e.getActionCommand().equals("Remove")) {
    debug("you clicked Remove Waypoint");
    removeWps(frWps.getSelectedItem().toString(),
    toWps.getSelectedItem().toString());
   }else if(e.getActionCommand().equals("Add")) {
    debug("you clicked Add Waypoint");
    addWp();
    frWps.addItem(nameIn.getText());
    toWps.addItem(nameIn.getText());
    distBearIn.setText("Added: "+nameIn.getText());
   }else if(e.getActionCommand().equals("Modify")) {
    debug("you clicked Modify Waypoint");
    addWp();
   }else if(e.getActionCommand().equals("Import")) {
    debug("you clicked Import Json Library");
    hashi = importFile("waypoints.json");
   }else if(e.getActionCommand().equals("Export")) {
    debug("you clicked Export Json Library");
    exportFile();
   }else if(e.getActionCommand().equals("Distance")) {
    debug("you clicked Distance and Bearing");
    distBearIn.setText(String.valueOf(haversineDistance()) + "km, "
       + String.valueOf(haversineBearing() + " degrees"));
   }
  }

  private void debug(String message) {
   if (debugOn)
    System.out.println("debug: "+message);
  }
  
  public JSONObject importFile(String jsonFileName) {
    try {
      FileInputStream in = new FileInputStream(jsonFileName);
      JSONObject obj = new JSONObject(new JSONTokener(in));
      boolean successful = wc.resetFromJsonFile();
      if(successful)
        System.out.println("names are:");
      String [] names = wc.getNames();
      for(int i = 0; i < names.length; i++) {
        frWps.addItem(names[i]);
        toWps.addItem(names[i]);
        System.out.println(names[i]);
      }
      return obj;
    }
    catch(FileNotFoundException ex)
    {
      System.out.println("Error uploading file " + jsonFileName);
    }
    return new JSONObject();
  }

  private void exportFile() {
    // try {
      // FileWriter file = new FileWriter("waypoints.json");
      // file.write(hashi.toString());
      // file.flush();
      // file.close();
      wc.saveToJsonFile();
      System.out.println("done");
    // } 
    // catch (IOException e) {
    //   e.printStackTrace();
    // }
  }

  private void addWp() {
    double lat, lon, ele;
    String name, addr;
    lat = Double.parseDouble(latIn.getText());
    lon = Double.parseDouble(lonIn.getText());
    ele = Double.parseDouble(eleIn.getText());
    name = nameIn.getText();
    addr = addrIn.getText();

    JSONObject json = new JSONObject();
    json.put("address", addr);
    json.put("name", name);
    json.put("lon", lon);
    json.put("lat", lat);
    json.put("ele", ele);
    hashi.put(name, json);

    Waypoint wp = new Waypoint(name, addr, ele, lat, lon);
    wc.add(wp);
  }

  private void removeWps(String from, String to) {
    if(!to.equals("to waypoint")){
      toWps.removeItem(toWps.getSelectedItem());
      hashi.remove(to);
      wc.remove(to);
    }
    if(!from.equals("from waypoint")) {
      frWps.removeItem(frWps.getSelectedItem());
      hashi.remove(from);
      wc.remove(from);
    }
  }

  private double haversineDistance() {
    double latFrom, lngFrom, latTo, lngTo, latFromRad,latToRad,
    deltaLat, deltaLng, a, c;
    double d = 0;
    String from = frWps.getSelectedItem().toString();
    String to = toWps.getSelectedItem().toString();
    if(!to.equals("to waypoint") && !from.equals("from waypoint")){
      latFrom = hashi.getJSONObject(from).getDouble("lat");
      lngFrom = hashi.getJSONObject(from).getDouble("lon");
      latTo = hashi.getJSONObject(to).getDouble("lat");
      lngTo = hashi.getJSONObject(to).getDouble("lon");

      latFromRad = Math.toRadians(latFrom);
      latToRad = Math.toRadians(latTo);
      deltaLat = Math.toRadians(latTo - latFrom);
      deltaLng = Math.toRadians(lngTo - lngFrom);
      a = Math.pow(Math.sin(deltaLat/2), 2) +
      Math.cos(latFromRad) * Math.cos(latToRad) *
      Math.pow(Math.sin(deltaLng/2), 2);
      c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      d = 6371 * c;
      d = Math.round(d * 100) / 100;
    }
    return d;
  }

  private double haversineBearing() {
    double latFrom, lngFrom, latTo, lngTo, latFromRad, latToRad,
    deltaLngRad, y, x;
    double bearing = 0;
    String from = frWps.getSelectedItem().toString();
    String to = toWps.getSelectedItem().toString();
    if(!to.equals("to waypoint") && !from.equals("from waypoint")){
      latTo = hashi.getJSONObject(to).getDouble("lat");
      lngTo = hashi.getJSONObject(to).getDouble("lon");
      latFrom = hashi.getJSONObject(from).getDouble("lat");
      lngFrom = hashi.getJSONObject(from).getDouble("lon");

      deltaLngRad = Math.toRadians(lngTo - lngFrom);
      latFromRad = Math.toRadians(latFrom);
      latToRad = Math.toRadians(latTo);



      y = Math.sin(deltaLngRad) * Math.cos(latToRad);
      x = Math.cos(latFromRad) * Math.sin(latToRad) -
      Math.sin(latFromRad) * Math.cos(latToRad) * Math.cos(deltaLngRad);
      bearing = Math.toDegrees(Math.atan2(y, x));
      bearing = Math.round(bearing * 100) / 100;
    }
    return bearing;
  }




  public static void main(String args[]) {
    System.out.println(args[0] + " that was the first " + args[1]);
   String host = "localhost";
   String port = "8080";
   String name = "Java Waypoint Client";
   
   String url = "http://"+host+":"+port+"/";
   System.out.println("Opening connection to: "+url);

   WaypointCollectionClient sa2 = new WaypointCollectionClient(name, url);
  }
}
